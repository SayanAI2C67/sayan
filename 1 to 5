Here are all the codes from your assignments, rewritten with comments explaining each step and highlighting exactly where user input is required.
I've also corrected minor typos and logical errors (like misplaced return statements or incorrect loop logic) from the original document to ensure the codes compile and run as intended.
Assignment I: Array & Loops
1. Pattern (right triangle)
[cite_start]C Code [cite: 1, 2]
#include <stdio.h> // For input/output functions like printf and scanf

int main() {
    int n, i, j; // n = number of rows, i/j = loop counters

    // Prompt the user for input
    printf("Enter the number of rows: "); 
    // [USER INPUT] Read the integer value for 'n'
    scanf("%d", &n); [span_0](start_span)//[span_0](end_span)

    // Outer loop iterates from 1 to n (for each row)
    for (i = 1; i <= n; i++) {
        
        // Inner loop prints '*' i times
        for (j = 0; j < i; j++) {
            printf("*");
        }
        
        // Move to the next line after the row is complete
        printf("\n");
    }

    return 0; // Return 0 to indicate successful execution
}

Python Code
# [USER INPUT] Read the integer value for 'n'
n = int(input("Enter the number of rows: "))

# Loop from 1 up to (and including) n
for i in range(1, n + 1):
    # Print the '*' character 'i' times
    # In Python, "char" * int repeats the string
    print("*" * i)

2. Inverted pattern
[cite_start]C Code [cite: 3]
#include <stdio.h>

int main() {
    int n, i, j; // n = number of rows, i/j = loop counters

    printf("Enter the number of rows: ");
    // [USER INPUT] Read the integer value for 'n'
    scanf("%d", &n); [span_1](start_span)//[span_1](end_span)

    // Outer loop iterates from n down to 1
    [span_2](start_span)for (i = n; i >= 1; i--) { //[span_2](end_span)
        
        // Inner loop prints '*' i times
        for (j = 0; j < i; j++) {
            printf("*");
        }
        
        // Move to the next line
        printf("\n");
    }

    return 0; // Moved return outside the loop
}

Python Code
# [USER INPUT] Read the integer value for 'n'
n = int(input("Enter the number of rows: "))

# Loop from n down to 1
# range(start, stop, step)
for i in range(n, 0, -1):
    # Print the '*' character 'i' times
    print("*" * i)

3. Fibonacci
[cite_start]C Code [cite: 4, 5]
#include <stdio.h>

int main() {
    int n, i;
    long long a = 0, b = 1, c; // Use long long for larger Fibonacci numbers

    printf("Enter the number of Fibonacci terms to display: ");
    // [USER INPUT] Read the number of terms 'n'
    scanf("%d", &n); [span_3](start_span)//[span_3](end_span)

    // Loop 'n' times
    for (i = 0; i < n; i++) {
        if (i == 0) {
            printf("0"); // First term
        } else if (i == 1) {
            printf(" %lld", b); [span_4](start_span)// Second term (using %lld for long long)[span_4](end_span)
        } else {
            // Calculate the next term
            c = a + b;
            printf(" %lld", c); // Print the next term
            
            // Update a and b for the next iteration
            a = b;
            b = c;
        }
    }
    printf("\n"); // Add a newline at the end

    return 0;
[span_5](start_span)} //[span_5](end_span)

Python Code
# [USER INPUT] Read the number of terms 'n'
n = int(input("Enter the number of Fibonacci terms: "))

a, b = 0, 1 # Initialize the first two terms

# Loop 'n' times
for i in range(n):
    # Print the current term 'a'
    # end=' ' prints a space instead of a newline
    print(a, end=' ') 
    
    # Simultaneously update a and b for the next iteration
    # a becomes b, and b becomes the sum (a+b)
    a, b = b, a + b

4. Insert element in array
[cite_start]C Code [cite: 6]
#include <stdio.h>

int main() {
    int n, i, pos, x;
    int a[100]; // Declare an array of size 100

    printf("Enter the size of the array (max 100): ");
    // [USER INPUT] Read the initial array size 'n'
    scanf("%d", &n);

    printf("Enter %d elements: ", n);
    // [USER INPUT] Loop to read 'n' elements into the array
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    printf("Enter the position (index) to insert: ");
    // [USER INPUT] Read the position (pos) and value (x)
    scanf("%d", &pos);
    printf("Enter the value to insert: ");
    scanf("%d", &x);

    // Shift elements to the right to make space
    // Start from the end (n) and go down to the position
    for (i = n; i > pos; i--) {
        a[i] = a[i - 1]; [span_6](start_span)//[span_6](end_span)
    }

    // Insert the new element at the specified position
    a[pos] = x; [span_7](start_span)//[span_7](end_span)

    // Increment the size of the array
    n++; [span_8](start_span)//[span_8](end_span)

    // Print the updated array
    printf("Array after insertion: ");
    for (i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");

    return 0;
}

[cite_start]Python Code [cite: 7]
# [USER INPUT] Read the initial array size (for prompt only)
n = int(input("Enter the size of the array: "))

# [USER INPUT] Read space-separated numbers and store them in a list
print(f"Enter {n} space-separated elements: ")
[span_9](start_span)a = list(map(int, input().split())) #[span_9](end_span)

# [USER INPUT] Read position and value as space-separated integers
print("Enter position and value to insert (space-separated): ")
[span_10](start_span)pos, x = map(int, input().split()) #[span_10](end_span)

# Python's list 'insert' method handles shifting automatically
# a[:pos] (elements before pos) + [x] (new element) + a[pos:] (elements from pos onwards)
[span_11](start_span)a = a[:pos] + [x] + a[pos:] #[span_11](end_span) 
# Alternatively, you could just use: a.insert(pos, x)

print("Array after insertion: ")
print(*a) # The * operator unpacks the list elements

5. Delete element at index
[cite_start]C Code [cite: 8]
#include <stdio.h>

int main() {
    int n, i, pos;
    int a[100];

    printf("Enter the size of the array (max 100): ");
    // [USER INPUT] Read the initial array size 'n'
    scanf("%d", &n);

    printf("Enter %d elements: ", n);
    // [USER INPUT] Loop to read 'n' elements
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    printf("Enter the position (index) to delete: ");
    // [USER INPUT] Read the position to delete
    scanf("%d", &pos); [span_12](start_span)//[span_12](end_span)

    // Shift elements to the left to overwrite the deleted one
    // Start from the deletion position
    for (i = pos; i < n - 1; i++) {
        a[i] = a[i + 1]; [span_13](start_span)//[span_13](end_span)
    }

    // Decrement the size of the array
    n--; [span_14](start_span)//[span_14](end_span)

    // Print the updated array
    printf("Array after deletion: ");
    for (i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");

    return 0;
}

Python Code
# [USER INPUT] Read array size (for prompt)
n = int(input("Enter the size of the array: "))

# [USER INPUT] Read space-separated elements
print(f"Enter {n} space-separated elements: ")
a = list(map(int, input().split()))

# [USER INPUT] Read position (index) to delete
pos = int(input("Enter the position (index) to delete: "))

# 'del' statement removes an item from a list by its index
del a[pos]

print("Array after deletion: ")
print(*a)

6. Remove duplicates
[cite_start]C Code [cite: 9]
#include <stdio.h>

int main() {
    int n, i, j, k = 0;
    int a[100], b[100]; // a[] is original, b[] is for unique elements

    printf("Enter the size of the array (max 100): ");
    // [USER INPUT] Read the array size 'n'
    scanf("%d", &n); [span_15](start_span)//[span_15](end_span)

    printf("Enter %d elements: ", n);
    // [USER INPUT] Read 'n' elements into array 'a'
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]); [span_16](start_span)//[span_16](end_span)
    }

    // Loop through each element in the original array 'a'
    for (i = 0; i < n; i++) {
        // Check if the element a[i] is already in our unique array 'b'
        for (j = 0; j < k; j++) {
            if (b[j] == a[i]) {
                break; // Found it, break inner loop
            }
        }
        
        // If the inner loop finished without breaking (j == k),
        // it means a[i] is a new, unique element.
        [span_17](start_span)if (j == k) { // Corrected from 'j==k1'[span_17](end_span)
            b[k] = a[i]; // Add it to the unique array
            k++;         // Increment the unique array size
        }
    }

    // Print the array with duplicates removed
    printf("Array without duplicates: ");
    for (i = 0; i < k; i++) {
        printf("%d ", b[i]);
    }
    printf("\n");

    return 0;
}

Python Code
# [USER INPUT] Read array size (for prompt)
n = int(input("Enter the size of the array: "))

# [USER INPUT] Read space-separated elements
print(f"Enter {n} space-separated elements: ")
a = list(map(int, input().split()))

r = [] # 'r' will store the unique elements
for x in a:
    # 'if x not in r' is an easy way to check for uniqueness
    if x not in r:
        r.append(x) # Add the element if it's not already in 'r'

print("Array without duplicates: ")
print(*r)

7. Max and Min
[cite_start]C Code [cite: 10, 11]
#include <stdio.h>

int main() {
    int n, i, x;
    int mx, mn; // mx for Max, mn for Min

    printf("Enter the number of elements: ");
    // [USER INPUT] Read the total number of elements 'n'
    scanf("%d", &n); [span_18](start_span)//[span_18](end_span)

    printf("Enter element 1: ");
    // [USER INPUT] Read the *first* element
    scanf("%d", &x); [span_19](start_span)//[span_19](end_span)

    // Initialize both max and min to the first element
    mx = mn = x; [span_20](start_span)//[span_20](end_span)

    // Loop from the *second* element (i=1) up to n
    for (i = 1; i < n; i++) {
        printf("Enter element %d: ", i + 1);
        // [USER INPUT] Read the next element
        scanf("%d", &x);

        // Check for new max
        if (x > mx) {
            mx = x;
        }
        // Check for new min
        if (x < mn) {
            mn = x;
        }
    }

    printf("Maximum: %d\n", mx);
    printf("Minimum: %d\n", mn);

    return 0;
[span_21](start_span)} //[span_21](end_span)

[cite_start]Python Code [cite: 11]
# [USER INPUT] Read array size (for prompt)
n = int(input("Enter the number of elements: "))

# [USER INPUT] Read space-separated elements
print(f"Enter {n} space-separated elements: ")
[span_22](start_span)a = list(map(int, input().split())) #[span_22](end_span)

# Python's built-in max() and min() functions
print("Maximum:", max(a))
print("Minimum:", min(a))

8. Rotate array
[cite_start]C Code [cite: 12]
#include <stdio.h>

int main() {
    int n, i, k;
    char d; // 'L' for Left, 'R' for Right
    int a[100], b[100]; // a[] is original, b[] is rotated

    printf("Enter the size of the array (max 100): ");
    // [USER INPUT] Read array size 'n'
    scanf("%d", &n);

    printf("Enter %d elements: ", n);
    // [USER INPUT] Read 'n' elements into array 'a'
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    printf("Enter rotation amount (k) and direction (L or R): ");
    // [USER INPUT] Read k (integer) and d (char)
    scanf("%d %c", &k, &d); [span_23](start_span)//[span_23](end_span)

    // Use modulo to handle rotations larger than n
    k %= n;

    if (d == 'L' || d == 'l') { // Check for 'L' or 'l'
        // Left rotation logic
        for (i = 0; i < n; i++) {
            b[i] = a[(i + k) % n]; // New index = (current + k) mod n
        }
    } else {
        // Right rotation logic
        for (i = 0; i < n; i++) {
            // New index = (current - k + n) mod n
            // (Adding 'n' handles negative results from i-k)
            b[i] = a[(i - k + n) % n];
        }
    }

    printf("Rotated array: ");
    for (i = 0; i < n; i++) {
        printf("%d ", b[i]);
    }
    printf("\n");

    return 0;
}

[cite_start]Python Code [cite: 13]
# [USER INPUT] Read array size (for prompt)
n = int(input("Enter the number of elements: "))

# [USER INPUT] Read space-separated elements
print(f"Enter {n} space-separated elements: ")
[span_24](start_span)a = list(map(int, input().split())) #[span_24](end_span)

# [USER INPUT] Read k and direction, space-separated
print("Enter rotation amount (k) and direction (L or R): ")
[span_25](start_span)k, d = input().split() #[span_25](end_span)

# Convert k to an integer and apply modulo
k = int(k) % n

if d.lower() == 'l': # Use .lower() to handle 'L' or 'l'
    # Slicing: a[k:] (from k to end) + a[:k] (from start to k)
    r = a[k:] + a[:k]
else:
    # Slicing: a[-k:] (last k elements) + a[:-k] (all but last k)
    r = a[-k:] + a[:-k]

print("Rotated array: ")
print(*r)

9. Frequency count
[cite_start]C Code [cite: 14]
#include <stdio.h>

int main() {
    int n, i, j;
    int a[100];
    int used[100] = {0}; // An array to mark elements as counted

    printf("Enter the size of the array (max 100): ");
    // [USER INPUT] Read array size 'n'
    scanf("%d", &n); [span_26](start_span)//[span_26](end_span)

    printf("Enter %d elements: ", n);
    // [USER INPUT] Read 'n' elements into array 'a'
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]); [span_27](start_span)//[span_27](end_span)
    }

    printf("Frequency count:\n");
    // Loop through each element
    for (i = 0; i < n; i++) {
        // Check if this element has already been counted
        if (used[i] == 0) { // Check if 'used' flag is 0 (not 1)
            int c = 1; // Start count at 1 (for the element itself)
            
            // Loop through the *rest* of the array
            for (j = i + 1; j < n; j++) {
                // If we find a match
                if (a[i] == a[j]) {
                    c++;       // Increment the count
                    used[j] = 1; // Mark this duplicate as 'used'
                }
            }
            // Print the element and its total count
            printf("%d occurs %d times\n", a[i], c);
        }
    }
    return 0;
}

[cite_start]Python Code [cite: 15]
# Import the Counter class, which is designed for this!
[span_28](start_span)from collections import Counter #[span_28](end_span)

# [USER INPUT] Read array size (for prompt)
n = int(input("Enter the number of elements: "))

# [USER INPUT] Read space-separated elements
print(f"Enter {n} space-separated elements: ")
[span_29](start_span)a = list(map(int, input().split())) #[span_29](end_span)

# Create a Counter object (which is like a dictionary)
# It automatically counts the frequency of each item in 'a'
[span_30](start_span)c = Counter(a) #[span_30](end_span)

print("Frequency count: ")
# Loop through the (key, value) pairs in the Counter
for k, v in c.items():
    [span_31](start_span)print(f"{k} occurs {v} times") #[span_31](end_span)

10. Merge two sorted arrays
C Code
#include <stdio.h>

int main() {
    int m, n, i = 0, j = 0, k = 0;
    int a[100], b[100], c[200]; // a[] and b[] are inputs, c[] is merged

    printf("Enter size of first sorted array (m): ");
    // [USER INPUT] Read size of first array 'm'
    scanf("%d", &m);
    printf("Enter %d sorted elements for first array: ", m);
    // [USER INPUT] Read 'm' elements into array 'a'
    for (i = 0; i < m; i++) {
        scanf("%d", &a[i]);
    }

    printf("Enter size of second sorted array (n): ");
    // [USER INPUT] Read size of second array 'n'
    scanf("%d", &n);
    printf("Enter %d sorted elements for second array: ", n);
    // [USER INPUT] Read 'n' elements into array 'b'
    for (i = 0; i < n; i++) {
        scanf("%d", &b[i]); // Corrected typo from source
    }

    // Reset i and j to 0 to use as pointers
    i = j = 0;

    // --- Merge Logic ---
    // While there are still elements in *both* arrays
    while (i < m && j < n) {
        // Compare elements from a and b
        if (a[i] < b[j]) {
            c[k++] = a[i++]; // Copy from a, increment i and k
        } else {
            c[k++] = b[j++]; // Copy from b, increment j and k
        }
    }

    // --- Copy remaining elements ---
    // If array 'a' still has elements left
    while (i < m) {
        c[k++] = a[i++];
    }
    // If array 'b' still has elements left
    while (j < n) {
        c[k++] = b[j++];
    }

    // Print the final merged array
    printf("Merged sorted array: ");
    for (i = 0; i < k; i++) {
        printf("%d ", c[i]);
    }
    printf("\n");

    return 0;
}

Python Code
# [USER INPUT] Read sizes m and n, space-separated
print("Enter sizes of first and second array (m n): ")
m, n = map(int, input().split())

# [USER INPUT] Read 'm' space-separated elements for list 'a'
print(f"Enter {m} sorted elements for first array: ")
a = list(map(int, input().split()))

# [USER INPUT] Read 'n' space-separated elements for list 'b'
print(f"Enter {n} sorted elements for second array: ")
b = list(map(int, input().split()))

# Pointers for lists a and b, and 'r' is the result list
i = j = 0
r = []

# While there are elements in both lists
while i < m and j < n:
    if a[i] < b[j]:
        r.append(a[i])
        i += 1
    else:
        r.append(b[j])
        j += 1

# Add any remaining elements from 'a' (using slicing)
r += a[i:]
# Add any remaining elements from 'b' (using slicing)
r += b[j:]

print("Merged sorted array: ")
print(*r)

[cite_start]Assignment II: Lists, Tuples, Sets, Dictionary (Python) [cite: 16]
Lists
1. Reverse a list
# [USER INPUT] Read space-separated items
print("Enter list items (e.g., 1 2 3): ")
a = list(map(int, input().split()))

# a.reverse() modifies the list in-place
[span_32](start_span)a.reverse() #[span_32](end_span)

print("Reversed list:", a)

2. Concatenate two lists index-wise
# [USER INPUT] Read first list (e.g., "Hello ")
print("Enter first list (e.g., M p J): ")
[span_33](start_span)a = list(input().split()) #[span_33](end_span)

# [USER INPUT] Read second list (e.g., "World")
print("Enter second list (e.g., y y oe): ")
[span_34](start_span)b = list(input().split()) #[span_34](end_span)

# zip(a, b) pairs elements: (a[0], b[0]), (a[1], b[1]), ...
# List comprehension [i + j for ...] concatenates the paired strings
[span_35](start_span)result = [i + j for i, j in zip(a, b)] #[span_35](end_span)
print("Index-wise concatenation:", result)
# Example: ['My', 'py', 'Joe']

3. Turn every item of a list into its square
# [USER INPUT] Read space-separated numbers
print("Enter numbers (e.g., 1 2 3 4): ")
[span_36](start_span)a = list(map(int, input().split())) #[span_36](end_span)

# List comprehension: [x*x for x in a] applies the operation to each item
[span_37](start_span)result = [x * x for x in a] #[span_37](end_span)
print("Squared list:", result)

4. Concatenate two lists in order
# [USER INPUT] Read first list (e.g., "Hello ")
print("Enter first list (e.g., Hello ): ")
[span_38](start_span)a = list(input().split()) #[span_38](end_span)

# [USER INPUT] Read second list (e.g., "Dear Sir")
print("Enter second list (e.g., Dear Sir): ")
[span_39](start_span)b = list(input().split()) #[span_39](end_span)

# Nested loop in a list comprehension
# For each 'x' in 'a', loop through every 'y' in 'b'
[span_40](start_span)result = [x + y for x in a for y in b] #[span_40](end_span)
print("Concatenated list:", result)
# Example: ['HelloDear', 'HelloSir', ' Dear', ' Sir']

5. Iterate both lists simultaneously
# [USER INPUT] Read first list
print("Enter first list (e.g., 1 2 3): ")
[span_41](start_span)a = list(input().split()) #[span_41](end_span)

# [USER INPUT] Read second list
print("Enter second list (e.g., a b c): ")
[span_42](start_span)b = list(input().split()) #[span_42](end_span)

print("Paired elements:")
# zip(a, b) pairs elements. Loop stops at the end of the shorter list.
[span_43](start_span)for i, j in zip(a, b): #[span_43](end_span)
    print(i, j)

6. Remove empty strings from list
# [USER INPUT] Read space-separated strings, possibly with empty ones
print("Enter list items (e.
